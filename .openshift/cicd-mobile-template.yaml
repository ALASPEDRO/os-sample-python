apiVersion: v1
kind: Template
labels:
  template: cicdm
  group: cicdm
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials"
parameters:
- displayName: DEV project name
  value: devm
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stagem
  name: STAGE_PROJECT
  required: true
- displayName: STAGE TAG with version.release.modification format
  from: 'v[0-9]{2}.[0-9]{2}.[0-9]{2}'
  generate: expression
  name: STAGE_TAG
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
- displayName: Application name
  description: Application name example mobile-app
  name: APPLICATION_NAME
  required: true
  value: mobile-app
- displayName: Frontend GIT repository
  description: Frontend GIT repository example https://github.com/slombard2011/front_html.git
  name: FRONTEND_GIT_REPO
  required: true
  value: https://github.com/slombard2011/front_html.git
- displayName: Frontend Git branch
  description: Git branch of Frontend repository to clone
  name: FRONTEND_GIT_BRANCH
  required: true
  value: master
- displayName: Backend GIT repository
  description: Backend GIT repository example https://github.com/ALASPEDRO/os-sample-python.git
  name: BACKEND_GIT_REPO
  required: true
  value: https://github.com/ALASPEDRO/os-sample-python.git
- displayName: Backend Git branch
  description: Git branch of backend repository to clone
  name: BACKEND_GIT_BRANCH
  required: true
  value: master
- displayName: Template name
  description: Template name that deploy the entire app
  name: TEMPLATE_NAME
  required: true
  value: https://raw.githubusercontent.com/ALASPEDRO/os-sample-python/master/.openshift/template.yaml
- displayName: Artifact folder
  description: Artifact folder to storage the file.zip code
  name: ARTIFACT_FOLDER
  required: true
  value: target
- description: >-
    Unique app deployment identifyer. You can specify one or let the system
    generate one automatically for you.
  displayName: (Optional) Deployment ID
  from: '[a-z]{5}'
  generate: expression
  name: DEPL_ID
  required: true
objects:
#kind: RoleBinding admin
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
#kind: BuildConfig mobile-pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicdm-pipeline
      name: cicdm-pipeline
    name: mobile-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        - name: STAGE_TAG
          value: ${STAGE_TAG}
        - name: APPLICATION_NAME
          value: ${APPLICATION_NAME}
        - name: FRONTEND_GIT_REPO
          value: ${FRONTEND_GIT_REPO}
        - name: BACKEND_GIT_REPO
          value: ${BACKEND_GIT_REPO}
        - name: BACKEND_GIT_BRANCH
          value: ${BACKEND_GIT_BRANCH}
        - name: TEMPLATE_NAME
          value: ${TEMPLATE_NAME}
        - name: ARTIFACT_FOLDER
          value: ${ARTIFACT_FOLDER}
        - name: DEPL_ID
          value: ${DEPL_ID}          
        jenkinsfile: |-
          pipeline {
            agent {
              node {label 'python'}
            }
            stages {
              stage('Get Latest Code') {
                steps {
                  git branch: "${BACKEND_GIT_BRANCH}", url: "${BACKEND_GIT_REPO}"
                }
              }            
              stage ("Install Dependencies") {
                steps {
                  sh """
                  pip install virtualenv
                  virtualenv --no-site-packages .
                  source bin/activate
                  pip install -r requirements.pip
                  deactivate
                  """
                }
              }
              stage('Run Tests') {
                steps {
                    sh '''
                    source bin/activate
                    nosetests --with-xunit
                    deactivate
                    '''
                    junit "nosetests.xml"
                }
              }
              stage('Store Artifact'){
                steps{
                  script{
                    def safeBuildName  = "${APPLICATION_NAME}_${BUILD_NUMBER}",
                        artifactFolder = "${ARTIFACT_FOLDER}",
                        fullFileName   = "${safeBuildName}.tar.gz",
                        applicationZip = "${artifactFolder}/${fullFileName}"
                        applicationDir = ["wsgi.py",
                                            "requirements.txt",
                                            "config.py",
                                            ".s2i",
                                            ].join(" ");
                    def needTargetPath = !fileExists("${artifactFolder}")
                    
                    if (needTargetPath) {
                      sh "mkdir ${artifactFolder}"
                    }
                    sh "tar -czvf ${applicationZip} ${applicationDir}"
                    archiveArtifacts artifacts: "${applicationZip}", excludes: null, onlyIfSuccessful: true
                  }
                }
              }              
              stage('Build Image') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "${APPLICATION_NAME}-backend-${DEPL_ID}").startBuild("--from-archive=${ARTIFACT_FOLDER}/${APPLICATION_NAME}_${BUILD_NUMBER}.tar.gz", "--follow", "--wait=true")
                      }
                    }
                  }
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:30, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                  }
                  script {
                    openshift.withCluster() {
                      openshift.tag("${DEV_PROJECT}/${APPLICATION_NAME}-backend-${DEPL_ID}:latest", "${STAGE_PROJECT}/${APPLICATION_NAME}-backend-${DEPL_ID}:${STAGE_TAG}.${BUILD_NUMBER}")
                      openshift.tag("${STAGE_PROJECT}/${APPLICATION_NAME}-backend-${DEPL_ID}:${STAGE_TAG}.${BUILD_NUMBER}", "${STAGE_PROJECT}/${APPLICATION_NAME}-backend-${DEPL_ID}:latest")
                    }
                  }
                }
              }
            }          
          }
      type: JenkinsPipeline
#kind: ConfigMap jenkins-slaves (maven, scopeo and python)
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicdm-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    python-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>python</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>python</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>idealo/jenkins-slave-python-centos7:latest</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Mobile app CI/CD
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-mobile-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |           
            # adjust jenkins 
            oc set resources dc/jenkins --limits=cpu=3,memory=4Gi --requests=cpu=1Gi,memory=1Gi 
            oc label dc jenkins app=jenkins --overwrite 

            # setup mobile-dev env
            
            oc -n ${DEV_PROJECT} new-app \
                -f ${TEMPLATE_NAME} \
                -p APP_NAME=${APPLICATION_NAME} \
                -p DEPL_ID=${DEPL_ID} \
                -p BACKEND_GIT_REPO=${BACKEND_GIT_REPO} \
                -p BACKEND_GIT_REPO_REF=${BACKEND_GIT_BRANCH} \
                -p FRONTEND_GIT_REPO=${FRONTEND_GIT_REPO}\
                -p FRONTEND_GIT_REPO_REF=${FRONTEND_GIT_BRANCH}

            # setup mobile-stage env
            oc -n ${STAGE_PROJECT} new-app \
                -f ${TEMPLATE_NAME} \
                -p APP_NAME=${APPLICATION_NAME} \
                -p DEPL_ID=${DEPL_ID} \
                -p BACKEND_GIT_REPO=${BACKEND_GIT_REPO} \
                -p BACKEND_GIT_REPO_REF=${BACKEND_GIT_BRANCH} \
                -p FRONTEND_GIT_REPO=${FRONTEND_GIT_REPO}\
                -p FRONTEND_GIT_REPO_REF=${FRONTEND_GIT_BRANCH}       
            
          image: openshift/origin:v3.11
          name: cicd-mobile-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
